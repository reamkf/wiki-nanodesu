name: Deploy Next.js site to GitHub Pages

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "README.md"
      - "LICENSE.md"
      - ".vscode/*"
      - ".cursor/*"
      - ".cursorignore"
      - "gas/*"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lock') }}-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build with Next.js
        run: bun run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Notify Discord
        if: always()
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          STATUS: ${{ job.status }}
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}
        run: |
          repo_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
          run_url="$repo_url/actions/runs/$GITHUB_RUN_ID"
          commit_url="$repo_url/commit/$GITHUB_SHA"
          short_sha=$(echo "$GITHUB_SHA" | cut -c1-7)
          actor_url="$GITHUB_SERVER_URL/$GITHUB_ACTOR"
          actor_icon="https://github.com/${GITHUB_ACTOR}.png?size=64"
          ref_url="$repo_url/tree/$GITHUB_REF_NAME"
          # Pages URL フォールバック
          page_url="${PAGE_URL}"
          if [ -z "$page_url" ]; then
            owner=${GITHUB_REPOSITORY%%/*}
            repo=${GITHUB_REPOSITORY##*/}
            page_url="https://${owner}.github.io/${repo}/"
          fi
          if [ "$STATUS" = "success" ]; then
            color=3066993
            title="✅ wiki-nanodesu deployment success"
          elif [ "$STATUS" = "failure" ]; then
            color=15158332
            title="❌ wiki-nanodesu deployment failed"
          else
            color=15105570
            title="⚠️ wiki-nanodesu deployment ${STATUS}"
          fi
          payload=$(cat <<EOF
          {
            "username": "GitHub",
            "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
            "embeds": [
              {
                "title": "${title}",
                "url": "${run_url}",
                "color": ${color},
                "author": {
                  "name": "${GITHUB_ACTOR}",
                  "url": "${actor_url}",
                  "icon_url": "${actor_icon}"
                },
                "fields": [
                  {"name":"Repository","value":"[${GITHUB_REPOSITORY}](${repo_url})","inline":true},
                  {"name":"Pages URL","value":"${page_url}","inline":false},
                  {"name":"Ref","value":"[${GITHUB_REF_NAME}](${ref_url})","inline":true},
                  {"name":"Commit","value":"[\`${short_sha}\`](${commit_url})","inline":true},
                  {"name":"Actor","value":"[${GITHUB_ACTOR}](${actor_url})","inline":true}
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF
          )
          curl -H "Content-Type: application/json" -X POST -d "$payload" "$WEBHOOK_URL"
